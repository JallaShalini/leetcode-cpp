class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        unordered_map<int, int> num_map; // stores value -> index

    for (int i = 0; i < nums.size(); i++) {
        int complement = target - nums[i];

        if (num_map.find(complement) != num_map.end()) {
            // If complement is found, return indices
            return {num_map[complement], i};
        }

        // Store the current number and its index
        num_map[nums[i]] = i;
    }

    // No solution found (but problem guarantees one)
    return {};
}

int main() {
    vector<int> nums = {2, 7, 11, 15};
    int target = 9;
    
    vector<int> result = twoSum(nums, target);
    
    cout << "[" << result[0] << ", " << result[1] << "]" << endl;

    return 0;
    }
};
